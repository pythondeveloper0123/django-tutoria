open folder-->right click-->open git bash here

#for only first time
git config --global user.name "myusername"
git config --global user.email "myemail@gmail.com"

git init-->initializes/create empty hidden git repo in current folder
git add remote origin "https://github.com/mygithubaccount/mygithubrepository.git"-->
git pull origin master-->
git status  untracked files-->check status/changes whether they are tracked/untracked/changed 

touch first.html   -->create first.html

git add first.html	#first.html will be added to staging area(tracked area) from untracked area

git add . -->#to add all the files in the folder to stage 
git status staging area-->
git commit -m "message" --->
git status local repository-->
git push origin master -->

'''
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
'''
$ git help -a
See 'git help <command>' to read about a specific subcommand

Main Porcelain Commands
   add                  Add file contents to the index
   am                   Apply a series of patches from a mailbox
   archive              Create an archive of files from a named tree
   bisect               Use binary search to find the commit that introduced a bug
   branch               List, create, or delete branches
   bundle               Move objects and refs by archive
   checkout             Switch branches or restore working tree files
   cherry-pick          Apply the changes introduced by some existing commits
   citool               Graphical alternative to git-commit
   clean                Remove untracked files from the working tree
   clone                Clone a repository into a new directory
   commit               Record changes to the repository
   describe             Give an object a human readable name based on an available ref
   diff                 Show changes between commits, commit and working tree, etc
   fetch                Download objects and refs from another repository
   format-patch         Prepare patches for e-mail submission
   gc                   Cleanup unnecessary files and optimize the local reposit:


'''

'''

tracked files-they stores the change history and can be pushed to remote repository
untracked files--these files exist locally but they are not part of git repository yet, file changes are not recorded/tracked

git checkout -b "newbranch1" -->Switched to a new branch "newbranch1"
git push origin newbranch1
git checkout master -->Switched to branch 'master'

git merge newbranch1 -m "newbranch1 merge"


open folder-->right click-->open git bash here

#for only first time
git config --global user.name "myusername"
git config --global user.email "myemail@gmail.com"

git init-->initializes/create empty hidden git repo in current folder
git add remote origin "https://github.com/mygithubaccount/mygithubrepository.git"-->
git pull origin master-->
git status  untracked files-->check status/changes whether they are tracked/untracked/changed 

touch first.html   -->create first.html

git add first.html	#first.html will be added to staging area(tracked area) from untracked area

git add . -->#to add all the files in the folder to stage 
git status staging area-->
git commit -m "message" --->
git status local repository-->
git push origin master -->



tracked files-they stores the change history and can be pushed to remote repository
untracked files--these files exist locally but they are not part of git repository yet, file changes are not recorded/tracked

git checkout -b "newbranch1" -->Switched to a new branch "newbranch1"
git push origin newbranch1
git checkout master -->Switched to branch 'master'

git merge newbranch1 -m "newbranch1 merge"


